#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <unistd.h>
#define N 2
sem_t forks[N],lock;
void *philosopher(void*num) {
    int id=*(int*)num;
    while (1) {
        sem_wait(&lock);
        sem_wait(&forks[id]);
        sem_wait(&forks[(id+1)%N]);
        sem_post(&lock);
        printf("Philosopher %d is eating\n",id);
        sleep(1);
        sem_post(&forks[id]);
        sem_post(&forks[(id+1)%N]);
        printf("Philosopher %d is sleeping\n",id);
        sleep(1);
    }
}
int main() {
    pthread_t threads[N];
    int ids[N];
    sem_init(&lock,0,1);
    for (int i=0;i<N;i++)sem_init(&forks[i], 0, 1), ids[i]=i;
    for (int i=0;i<N;i++)pthread_create(&threads[i], NULL, philosopher, &ids[i]);
    for (int i=0;i<N;i++)pthread_join(threads[i], NULL);
    for (int i=0;i<N;i++)sem_destroy(&forks[i]);
    sem_destroy(&lock);
    return 0;
}
